/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2013 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 1000.0;
	SIMULATION_TIME = 1000.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("col1")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("col2")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("col3")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("col4")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("lig1")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("lig2")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("lig3")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("lig4")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("sortie")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 7;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("sortie[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "sortie";
}

SIGNAL("sortie[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "sortie";
}

SIGNAL("sortie[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "sortie";
}

SIGNAL("sortie[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "sortie";
}

SIGNAL("sortie[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "sortie";
}

SIGNAL("sortie[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "sortie";
}

SIGNAL("sortie[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "sortie";
}

TRANSITION_LIST("col1")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 50.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 260.0;
		LEVEL 1 FOR 110.0;
		LEVEL 0 FOR 540.0;
	}
}

TRANSITION_LIST("col2")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 110.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 310.0;
		LEVEL 1 FOR 100.0;
		LEVEL 0 FOR 440.0;
	}
}

TRANSITION_LIST("col3")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 190.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 760.0;
	}
}

TRANSITION_LIST("col4")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 290.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 650.0;
	}
}

TRANSITION_LIST("lig1")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("lig2")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 70.0;
		LEVEL 0 FOR 90.0;
		LEVEL 1 FOR 180.0;
		LEVEL 0 FOR 560.0;
	}
}

TRANSITION_LIST("lig3")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 50.0;
		LEVEL 1 FOR 110.0;
		LEVEL 0 FOR 220.0;
		LEVEL 1 FOR 210.0;
		LEVEL 0 FOR 410.0;
	}
}

TRANSITION_LIST("lig4")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 100.0;
		LEVEL 0 FOR 90.0;
		LEVEL 1 FOR 140.0;
		LEVEL 0 FOR 650.0;
	}
}

TRANSITION_LIST("sortie[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 219.437;
		LEVEL 0 FOR 30.705;
		LEVEL 1 FOR 111.385;
		LEVEL 0 FOR 29.208;
		LEVEL 1 FOR 59.306;
		LEVEL 0 FOR 0.946;
		LEVEL 1 FOR 17.167;
		LEVEL 0 FOR 2.868;
		LEVEL 1 FOR 0.505;
		LEVEL 0 FOR 99.495;
		LEVEL 1 FOR 428.978;
	}
}

TRANSITION_LIST("sortie[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 219.826;
		LEVEL 1 FOR 0.901;
		LEVEL 0 FOR 29.58;
		LEVEL 1 FOR 0.508;
		LEVEL 0 FOR 199.615;
		LEVEL 1 FOR 18.115;
		LEVEL 0 FOR 531.455;
	}
}

TRANSITION_LIST("sortie[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 251.348;
		LEVEL 1 FOR 0.508;
		LEVEL 0 FOR 111.103;
		LEVEL 1 FOR 29.208;
		LEVEL 0 FOR 59.877;
		LEVEL 1 FOR 17.542;
		LEVEL 0 FOR 1.372;
		LEVEL 1 FOR 1.499;
		LEVEL 0 FOR 527.543;
	}
}

TRANSITION_LIST("sortie[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 250.492;
		LEVEL 1 FOR 0.287;
		LEVEL 0 FOR 111.104;
		LEVEL 1 FOR 29.208;
		LEVEL 0 FOR 60.252;
		LEVEL 1 FOR 17.166;
		LEVEL 0 FOR 1.397;
		LEVEL 1 FOR 1.475;
		LEVEL 0 FOR 528.619;
	}
}

TRANSITION_LIST("sortie[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 220.072;
		LEVEL 1 FOR 0.712;
		LEVEL 0 FOR 229.892;
		LEVEL 1 FOR 0.564;
		LEVEL 0 FOR 20.413;
		LEVEL 1 FOR 0.502;
		LEVEL 0 FOR 527.845;
	}
}

TRANSITION_LIST("sortie[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 219.807;
		LEVEL 1 FOR 29.58;
		LEVEL 0 FOR 218.244;
		LEVEL 1 FOR 1.414;
		LEVEL 0 FOR 1.451;
		LEVEL 1 FOR 0.506;
		LEVEL 0 FOR 528.998;
	}
}

TRANSITION_LIST("sortie[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 220.213;
		LEVEL 1 FOR 29.58;
		LEVEL 0 FOR 0.212;
		LEVEL 1 FOR 0.302;
		LEVEL 0 FOR 111.101;
		LEVEL 1 FOR 29.208;
		LEVEL 0 FOR 78.803;
		LEVEL 1 FOR 1.483;
		LEVEL 0 FOR 529.098;
	}
}

DISPLAY_LINE
{
	CHANNEL = "col1";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "col2";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "col3";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 2;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "col4";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 3;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "lig1";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 4;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "lig2";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 5;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "lig3";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 6;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "lig4";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 7;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "sortie";
	EXPAND_STATUS = EXPANDED;
	RADIX = Binary;
	TREE_INDEX = 8;
	TREE_LEVEL = 0;
	CHILDREN = 9, 10, 11, 12, 13, 14, 15;
}

DISPLAY_LINE
{
	CHANNEL = "sortie[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 9;
	TREE_LEVEL = 1;
	PARENT = 8;
}

DISPLAY_LINE
{
	CHANNEL = "sortie[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 10;
	TREE_LEVEL = 1;
	PARENT = 8;
}

DISPLAY_LINE
{
	CHANNEL = "sortie[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 11;
	TREE_LEVEL = 1;
	PARENT = 8;
}

DISPLAY_LINE
{
	CHANNEL = "sortie[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 12;
	TREE_LEVEL = 1;
	PARENT = 8;
}

DISPLAY_LINE
{
	CHANNEL = "sortie[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 13;
	TREE_LEVEL = 1;
	PARENT = 8;
}

DISPLAY_LINE
{
	CHANNEL = "sortie[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 14;
	TREE_LEVEL = 1;
	PARENT = 8;
}

DISPLAY_LINE
{
	CHANNEL = "sortie[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 15;
	TREE_LEVEL = 1;
	PARENT = 8;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}
;
